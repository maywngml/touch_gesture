{"version":3,"sources":["Image.Grid.js","App.js","reportWebVitals.js","index.js"],"names":["ImageGrid","temp1","temp2","temp3","useState","color","setColor","evCache","Array","prevDiff","pointerUpHandler","e","i","length","pointerId","splice","remove_event","className","onPointerDown","push","onPointerMove","curDiff","Math","abs","clientX","onPointerUp","onPointerCancel","onPointerOut","onPointerLeave","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPA6EeA,MA1Ef,WAAsB,IAEdC,EAAOC,EAAOC,EAFD,EACSC,mBAAS,cADlB,mBACVC,EADU,KACHC,EADG,KAGbC,EAAU,IAAIC,MACdC,GAAY,EA8CVC,EAAmB,SAACC,IA5CL,SAACA,GAClB,IAAI,IAAIC,EAAE,EAAGA,EAAEL,EAAQM,OAAQD,IAC3B,GAAGL,EAAQK,GAAGE,WAAaH,EAAEG,UAAW,CACpCP,EAAQQ,OAAOH,EAAG,GAClB,OAyCRI,CAAaL,GACbL,EAAS,cACNC,EAAQM,OAAS,IAChBJ,GAAY,IAIpB,OACI,sBACIQ,UAAU,YACVC,cA9CmB,SAACP,GACxBJ,EAAQY,KAAKR,GACQ,GAAlBJ,EAAQM,OACPZ,EAAQU,EAGRT,EAAQS,GAyCRS,cArCmB,SAACT,GACxBR,EAAQQ,EACR,IAAI,IAAIC,EAAE,EAAGA,EAAEL,EAAQM,OAAQD,IAC3B,GAAGD,EAAEG,WAAaP,EAAQK,GAAGE,UAAW,CACpCP,EAAQK,GAAKD,EACb,MAIR,GAAqB,GAAlBJ,EAAQM,OAAa,CACpB,IAAMQ,EAAUC,KAAKC,IAAIhB,EAAQ,GAAGiB,QAAUjB,EAAQ,GAAGiB,SAEtDf,EAAW,IACPY,EAAUZ,GACTH,EAAS,QAEVe,EAAUZ,GACTH,EAAS,cAIjBG,EAAWY,IAiBXI,YAAaf,EACbgB,gBAAiBhB,EACjBiB,aAAcjB,EACdkB,eAAgBlB,EAChBmB,MAAO,CAACC,gBAAiBzB,GAR7B,UAUCJ,EAVD,KAUUC,EAVV,KAUmBC,M,MC5DZ4B,MATf,WACE,OACE,sBAAKd,UAAU,MAAf,UACE,qBAAKA,UAAU,WACf,cAAC,EAAD,QCKSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.574053c0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Image.Grid.css';\r\n\r\nfunction ImageGrid() {\r\n    const [color, setColor] = useState(\"sandybrown\");\r\n    let temp1, temp2, temp3;\r\n    let evCache = new Array();\r\n    let prevDiff = -1;\r\n\r\n    const remove_event = (e) => {\r\n        for(let i=0; i<evCache.length; i++) {\r\n            if(evCache[i].pointerId == e.pointerId) {\r\n                evCache.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const pointerDownHandler = (e) => {\r\n        evCache.push(e);\r\n        if(evCache.length == 1) {\r\n            temp1 = e;\r\n        }\r\n        else {\r\n            temp2 = e;\r\n        }\r\n    }\r\n\r\n    const pointerMoveHandler = (e) => {\r\n        temp3 = e;\r\n        for(let i=0; i<evCache.length; i++) {\r\n            if(e.pointerId == evCache[i].pointerId) {\r\n                evCache[i] = e;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(evCache.length == 2) {\r\n            const curDiff = Math.abs(evCache[0].clientX - evCache[1].clientX);\r\n\r\n            if(prevDiff > 0) {\r\n                if(curDiff > prevDiff) {\r\n                    setColor(\"pink\");\r\n                }\r\n                if(curDiff < prevDiff) {\r\n                    setColor(\"lightblue\");\r\n                }\r\n            }\r\n    \r\n            prevDiff = curDiff;\r\n        }\r\n    }\r\n\r\n    const pointerUpHandler = (e) => {\r\n        remove_event(e);\r\n        setColor(\"sandybrown\");\r\n        if(evCache.length < 2) {\r\n            prevDiff = -1;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className=\"grid-area\"\r\n            onPointerDown={pointerDownHandler} \r\n            onPointerMove={pointerMoveHandler} \r\n            onPointerUp={pointerUpHandler}\r\n            onPointerCancel={pointerUpHandler}\r\n            onPointerOut={pointerUpHandler}\r\n            onPointerLeave={pointerUpHandler}\r\n            style={{backgroundColor: color}}\r\n        >\r\n        {temp1}, {temp2}, {temp3}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageGrid;","import ImageGrid from './Image.Grid';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"/>\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}